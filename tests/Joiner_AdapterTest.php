<?php

require_once dirname(__FILE__).'/../Adapter.php';
require_once dirname(__FILE__).'/../Joiner.php';
require_once dirname(__FILE__).'/../PDOLogger.php';

/**
 * Test class for Joiner_Adapter.
 * Generated by PHPUnit on 2011-03-31 at 09:56:37.
 */
class Joiner_AdapterTest extends PHPUnit_Framework_TestCase {
    /**
     * @var Joiner_Adapter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Joiner_Adapter('sqlite::memory:');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        Joiner_PDOLogger::$log = array();
    }

    protected function fixtures() {

        $this->object->exec('create table foo (bar VARCHAR(255))');
        $this->object->exec('insert into foo (bar) VALUES ("1")');
        $this->object->exec('insert into foo (bar) VALUES ("2")');
    }

    public function testGetConnection() {
        $conn = $this->object->getConnection();
        $this->assertInstanceOf('PDO', $conn);
        $this->assertEquals(true, $conn === $this->object->getConnection());
    }

    public function testGetSchema() {
        $schema = $this->object->getSchema();
        $this->assertInstanceOf('Joiner_Schema', $schema);
        $this->assertEquals(true, $schema === $this->object->getSchema());
    }

    public function testExecute() {
        $a = $this->object->execute('select 1');
        $b = $this->object->execute('select ?', 1);
        $c = $this->object->execute('select ?', array(1));


        $this->assertInstanceOf('PDOStatement', $a);
        $this->assertInstanceOf('PDOStatement', $b);
        $this->assertInstanceOf('PDOStatement', $c);

        $this->assertEquals(true, $a->fetchColumn(0) === '1');
        $this->assertEquals(true, $b->fetchColumn(0) === '1');
        $this->assertEquals(true, $c->fetchColumn(0) === '1');
        
    }

    public function testGetTable() {

        $table = $this->object->getTable('foo');
        $this->assertInstanceOf('Joiner_Table', $table);
        $this->assertEquals(false, $table === $this->object->getTable('foo'));

        $this->setExpectedException('Exception');
        $this->object->getTable('foo, bar');

        $this->object->getSchema()->setTable('foo')->setTable('bar')
                ->setRelation('foo.id', 'bar.foo_id');

        $this->assertInstanceOf('Joiner_Table', $this->object->getTable('foo, bar'));


        
    }

 
    /**
     * @todo Implement testFindBy().
     */
    public function testFindBy() {

        $this->fixtures();

        $foo = $this->object->findBy('foo.bar', 1);
        $this->assertEquals('1', $foo[0]->bar);
        
        $this->setExpectedException('Exception');
        $this->object->findBy('foo', 'bar');


    }

    /**
     * @todo Implement testFindOneBy().
     */
    public function testFindOneBy() {

        $this->fixtures();

        $foo = $this->object->findOneBy('foo.bar', 1);
        $this->assertEquals('1', $foo->bar);

        $this->setExpectedException('Exception');
        $this->object->findOneBy('foo', 'bar');
    }

    public function testGetExpr() {
        $foo = $this->object->getExpr('foo()');
        $bar = $this->object->getExpr('bar(?)', 'foo');

        $this->assertInstanceOf('Joiner_Expression', $foo);
        $this->assertInstanceOf('Joiner_Expression', $bar);
    }

    public function testEnableLogging() {
        $this->object->query('select 1');

        $this->object->enableLogging();
        $this->assertAttributeInstanceOf('Joiner_PDOLogger', 'pdo', $this->object);

        $this->object->enableLogging(false);
        $this->assertAttributeInstanceOf('PDO', 'pdo', $this->object);

        $new = new Joiner_Adapter('sqlite::memory:');

        $this->object->enableLogging();
        $this->object->query('select 1');
        $this->assertAttributeInstanceOf('Joiner_PDOLogger', 'pdo', $this->object);

        $this->object->enableLogging(false);
    }


    public function testGetLog() {
        $this->assertEquals(null, $this->object->getLog());
        $this->object->enableLogging();
        $this->object->query('select 1');
        $this->assertInstanceOf('Joiner_PDOLogger', $this->object->getLog());
    }


    public function test__call() {
        $actual = $this->object->quote('foo');
        $this->assertEquals("'foo'", $actual);
    }
}
?>
