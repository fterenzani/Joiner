<?php

require_once dirname(__FILE__).'/../Schema.php';

/**
 * Test class for Joiner_Schema.
 * Generated by PHPUnit on 2011-03-11 at 17:18:02.
 */
class Joiner_SchemaTest extends PHPUnit_Framework_TestCase {
    /**
     * @var Joiner_Schema
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Joiner_Schema;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }


    public function testSetTable() {
        $schema = $this->object->setTable('tbl_items', 'Items');
        $schema = $schema->setTable('tbl_items2');
        $this->assertInstanceOf('Joiner_Schema', $schema);
    }

    public function testSetRelation() {
        $schema = $this->object->setRelation('Items.author_id', 'Authors.id');
        $this->assertInstanceOf('Joiner_Schema', $schema);
    }

    public function testSetCrossReference() {        
        $schema = $this->object->setCrossReference('Items', 'TagItem', 'Tags');
        $this->assertInstanceOf('Joiner_Schema', $schema);
    }

    public function testGetTableByName() {
        $this->object->setTable('expected', 'Items');
        $this->object->setTable('expected2');
        $this->assertEquals('expected', $this->object->getTableByName('Items'));
        $this->assertEquals('expected2', $this->object->getTableByName('expected2'));
    }

    public function testGetRelation() {
        $this->object->setTable('t_items', 'Items');
        $this->object->setTable('t_authors', 'Authors');
        $this->object->setTable('cross', 'Cross');
        $this->object->setTable('foo', 'Foo');
        $this->object->setRelation('Items.author_id', 'Authors.id');
        $this->object->setCrossReference('Items', 'Cross', 'Foo');

        $expected = array(
            'key' => 'author_id',
            'foreign' => array(
                'name' => 'Authors',
                'table' => 't_authors',
                'key' => 'id',
            )
        );
        
        $actual = $this->object->getRelation('Items', 'Authors');

        $this->assertEquals($expected, $actual);

        // -------------------

        $expected = array('ref' => 'Cross');

        $actual = $this->object->getRelation('Items', 'Foo');

        $this->assertEquals($expected, $actual);

        $this->setExpectedException('Exception');
        $this->object->getRelation('foo', 'bar');


    }

    /**
     * @todo Implement testResolveTableExpr().
     */
    public function testResolveTableExpr() {
        $this->object->setTable('tbl_items', 'Items');

        $expected = Array (
            'as' => 'tbl_items',
            'name' => 'tbl_items',
            'table' => 'tbl_items'
        );
        $this->assertEquals($expected, $this->object->resolveTableExpr('tbl_items'));

        $expected = Array (
            'as' => 'i',
            'name' => 'tbl_items',
            'table' => 'tbl_items'
        );
        $this->assertEquals($expected, $this->object->resolveTableExpr('tbl_items i'));


        $expected = Array (
            'as' => 'i',
            'name' => 'Items',
            'table' => 'tbl_items'
        );
        $this->assertEquals($expected, $this->object->resolveTableExpr('Items i'));

        $expected = Array (
            'as' => 'Items',
            'name' => 'Items',
            'table' => 'tbl_items'
        );
        $this->assertEquals($expected, $this->object->resolveTableExpr('Items'));

        $this->setExpectedException('Exception');
        $this->object->resolveTableExpr('tbl_items i exception');
    }
}
?>
